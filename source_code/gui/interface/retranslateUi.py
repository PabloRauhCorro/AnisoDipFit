from PyQt5 import QtCore, QtGui, QtWidgets


#fills in the text for the GUI
def retranslateUi(self, MainWindow):
    _translate = QtCore.QCoreApplication.translate
    MainWindow.setWindowTitle(_translate("MainWindow", "AnisoDipFit"))
    self.open_log_button.setText(_translate("MainWindow", "Open Log "))
    self.run_button.setText(_translate("MainWindow", "Run"))
    self.stop_button.setText(_translate("MainWindow", "Stop"))
    self.stop_button.setStatusTip("End all running calculations. This is not a pause button!")
    self.label_54.setText(_translate("MainWindow", "Load your experimental data (.DAT format)."))
    self.label_55.setText(_translate("MainWindow", "Load PDS spectrum   "))
    self.label_56.setText(_translate("MainWindow", "Load PDS time trace  "))
    self.label_57.setText(_translate("MainWindow", "If the operation mode is set to \'Fitting\', experimental data is required.\n"
"If the operation mode is set to \'Simulation\', experimental data is optional."))
    self.show_exp_spec_button.setText(_translate("MainWindow", "Spectrum"))
    self.show_exptimet_button.setText(_translate("MainWindow", "Time trace"))
    self.label_59.setText(_translate("MainWindow", "Enter the calculation settings. They are relevant for all three operation modes.\n"
""))
    self.minf_line.setText(_translate("MainWindow", "0"))
    self.label_60.setStatusTip(_translate("MainWindow", "The number of Monte-Carlo samples used in numerical integration. It determines how accurately the PDS time trace or the PDS spectra will be simulated. Do not set this value below 10^5!"))
    self.label_60.setText(_translate("MainWindow", "Monte-Carlo samples"))
    self.label_64.setText(_translate("MainWindow", "Min time [µs]"))
    self.label_68.setStatusTip(_translate("MainWindow", "The value of the applied magnetic field used in the PDS experiment. This value has to be provided only if g selectivity is acticated."))
    self.label_68.setText(_translate("MainWindow", "Magnetic field [T]"))
    self.magnetic_field_line.setStatusTip(_translate("MainWindow", "The value of the applied magnetic field used in the PDS experiment. This value has to be provided only if g selectivity is acticated."))
    self.magnetic_field_line.setText(_translate("MainWindow", "1.1984"))
    self.mintime_line.setText(_translate("MainWindow", "0"))
    self.label_66.setText(_translate("MainWindow", "Max frequency [MHz]"))
    self.label_65.setText(_translate("MainWindow", "Max time [µs]"))
    self.montecarlo_line.setStatusTip(_translate("MainWindow", "The number of Monte-Carlo samples used in numerical integration. It determines how accurately the PDS time trace or the PDS spectra will be simulated. Do not set this value below 10^5!"))
    self.montecarlo_line.setText(_translate("MainWindow", "1000000"))
    self.maxf_line.setText(_translate("MainWindow", "30"))
    self.maxtime_line.setText(_translate("MainWindow", "10"))
    self.label_2.setText(_translate("MainWindow", "Noise SD"))
    self.noise_sd_line.setText(_translate("MainWindow", "0"))
    self.label_67.setText(_translate("MainWindow", "Min  frequency [MHz]"))
    self.g_selectivity_box.setStatusTip(_translate("MainWindow", "Take the difference in spin polarization for the different g-values of spinB into account. This parameter is relevant only for the RIDME data acquired at liquid helium temperatures."))
    self.g_selectivity_box.setText(_translate("MainWindow", "Temperature-based weights           "))
    self.main_widget.setTabText(self.main_widget.indexOf(self.general_tab), _translate("MainWindow", "General "))
    self.label_3.setText(_translate("MainWindow", "\n"
"Choose the type of simulated data. \n"
""))
    self.sim_specvsphi_chbox.setText(_translate("MainWindow", "Spectrum vs φ"))
    self.sim_specvstheta_chbox.setText(_translate("MainWindow", "Spectrum vs θ"))
    self.sim_specvsT_chbox.setStatusTip(_translate("MainWindow", "Be aware that \'g-selectivity\' needs to be activated and a value for \'magnetic field\' needs to be given to calculate Spectrum vs T."))
    self.sim_specvsT_chbox.setText(_translate("MainWindow", "Spectrum vs T"))
    self.sim_specvsxi_chbox.setText(_translate("MainWindow", "Spectrum vs ξ"))
    self.sim_timetr_chbox.setText(_translate("MainWindow", "Time trace"))
    self.sim_spec_chbox.setText(_translate("MainWindow", "Spectrum"))
    self.label_37.setText(_translate("MainWindow", "Enter the simulation settings.\n"
"\n"
""))
    self.label_34.setStatusTip(_translate("MainWindow", "The maximum value of the ξ axis of the spectrum vs ξ simulation"))
    self.label_34.setText(_translate("MainWindow", "Max <ξ>  [°]"))
    self.sim_xi_min_line.setStatusTip(_translate("MainWindow", "The minimal value of the ξ axis of the spectrum vs ξ simulation"))
    self.sim_xi_min_line.setText(_translate("MainWindow", "0"))
    self.sim_temp_samples_line.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [Tmin, Tmax]"))
    self.sim_temp_samples_line.setText(_translate("MainWindow", "10"))
    self.sim_Tmin_line.setStatusTip(_translate("MainWindow", "The minimal value of the T axis of the spectrum vs T simulation"))
    self.sim_Tmin_line.setText(_translate("MainWindow", "2"))
    self.label_12.setStatusTip(_translate("MainWindow", "The width Δφ of the angular distribution P(φ)"))
    self.label_12.setText(_translate("MainWindow", "Δφ  [°]"))
    self.label_32.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [φmin, φmax]"))
    self.label_32.setText(_translate("MainWindow", "Number of samples"))
    self.r_distr_box.setStatusTip(_translate("MainWindow", "The shape of the inter-spin distance distribution P(r)"))
    self.r_distr_box.setItemText(0, _translate("MainWindow", "normal"))
    self.r_distr_box.setItemText(1, _translate("MainWindow", "uniform"))
    self.sim_Tmax_line.setStatusTip(_translate("MainWindow", "The maximum value of the T axis of the spectrum vs T simulation"))
    self.sim_Tmax_line.setText(_translate("MainWindow", "299"))
    self.sim_theta_min_line.setStatusTip(_translate("MainWindow", "The minimal value of the θ axis of the spectrum vs θ simulation"))
    self.sim_theta_min_line.setText(_translate("MainWindow", "0"))
    self.label_26.setStatusTip(_translate("MainWindow", "The minimal value of the φ axis of the spectrum vs φ simulation"))
    self.label_26.setText(_translate("MainWindow", " Min <φ>   [°]"))
    self.label_52.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [Tmin, Tmax]"))
    self.label_52.setText(_translate("MainWindow", "Number of samples"))
    self.label_8.setStatusTip(_translate("MainWindow", "The mean value ‹φ› of the angular distribution P(φ)"))
    self.label_8.setText(_translate("MainWindow", "<φ>  [°]"))
    self.sim_theta_max_line.setStatusTip(_translate("MainWindow", "The maximum value of the axis of the spectrum vs simulation"))
    self.sim_theta_max_line.setText(_translate("MainWindow", "90"))
    self.label_19.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [θmin, θmax]"))
    self.label_19.setText(_translate("MainWindow", "Number of samples"))
    self.label_121.setStatusTip(_translate("MainWindow", "The shape of the inter-spin distance distribution P(r)"))
    self.label_121.setText(_translate("MainWindow", "P(r)"))
    self.label_51.setStatusTip(_translate("MainWindow", "The maximum value of the T axis of the spectrum vs T simulation"))
    self.label_51.setText(_translate("MainWindow", "Max Temperature [K]"))
    self.label_50.setStatusTip(_translate("MainWindow", "The minimal value of the T axis of the spectrum vs T simulation"))
    self.label_50.setText(_translate("MainWindow", "Min Temperature [K]"))
    self.label_17.setStatusTip(_translate("MainWindow", "The modulation depth of the simulated time trace. It needs to be given when the simulation of the time trace is activated and no experimental time trace was defined."))
    self.label_17.setText(_translate("MainWindow", "Modulation depth"))
    self.sim_phi_samples_line.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [min, max]"))
    self.sim_phi_samples_line.setText(_translate("MainWindow", "10"))
    self.label_13.setStatusTip(_translate("MainWindow", "The mean value ‹ξ› of the angular distribution P(ξ)"))
    self.label_13.setText(_translate("MainWindow", "<ξ> [°]"))
    self.label_62.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(φ)"))
    self.label_62.setText(_translate("MainWindow", "P(φ)"))
    self.sim_phi_mean_line.setStatusTip(_translate("MainWindow", "The mean value ‹φ› of the angular distribution P(φ)"))
    self.sim_phi_mean_line.setText(_translate("MainWindow", "0"))
    self.label_33.setStatusTip(_translate("MainWindow", "The minimal value of the ξ axis of the spectrum vs ξ simulation"))
    self.label_33.setText(_translate("MainWindow", "Min <ξ>  [°]"))
    self.sim_phi_width_line.setStatusTip(_translate("MainWindow", "The width Δφ of the angular distribution P(φ)"))
    self.sim_phi_width_line.setText(_translate("MainWindow", "0"))
    self.sim_phi_max_line.setStatusTip(_translate("MainWindow", "The maximum value of the axis of the spectrum vs simulation"))
    self.sim_phi_max_line.setText(_translate("MainWindow", "90"))
    self.sim_r_width_line.setStatusTip(_translate("MainWindow", "The width Δr of the inter-spin distance distribution P(r)"))
    self.sim_r_width_line.setText(_translate("MainWindow", "0"))
    self.label_22.setStatusTip(_translate("MainWindow", "The minimal value of the θ axis of the spectrum vs θ simulation"))
    self.label_22.setText(_translate("MainWindow", "Min θ  [°]"))
    self.label_35.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [ξmin, ξmax]"))
    self.label_35.setText(_translate("MainWindow", "Number of samples"))
    self.sim_moddepth_line.setStatusTip(_translate("MainWindow", "The modulation depth of the simulated time trace. It needs to be given when the simulation of the time trace is activated and no experimental time trace was defined."))
    self.sim_moddepth_line.setText(_translate("MainWindow", "0.5"))
    self.sim_r_mean_line.setStatusTip(_translate("MainWindow", "The mean value ‹r› of the inter-spin distance distribution P(r)"))
    self.sim_r_mean_line.setText(_translate("MainWindow", "2.5"))
    self.sim_xi_width_line.setStatusTip(_translate("MainWindow", "The width Δξ of the angular distribution P(ξ)"))
    self.sim_xi_width_line.setText(_translate("MainWindow", "0"))
    self.sim_theta_samples_line.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [min, max]"))
    self.sim_theta_samples_line.setText(_translate("MainWindow", "10"))
    self.sim_xi_max_line.setStatusTip(_translate("MainWindow", "The maximum value of the ξ axis of the spectrum vs ξ simulation"))
    self.sim_xi_max_line.setText(_translate("MainWindow", "90"))
    self.label_122.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(ξ)"))
    self.label_122.setText(_translate("MainWindow", "P(ξ)"))
    self.label_6.setStatusTip(_translate("MainWindow", "The mean value ‹r› of the inter-spin distance distribution P(r)"))
    self.label_6.setText(_translate("MainWindow", "<r> [nm]"))
    self.sim_temp_line.setText(_translate("MainWindow", "300"))
    self.label_16.setText(_translate("MainWindow", "Temperature [K]"))
    self.sim_xi_samples_line.setStatusTip(_translate("MainWindow", "The number of evenly spaced samples in the interval [ξmin, ξmax]"))
    self.sim_xi_samples_line.setText(_translate("MainWindow", "10"))
    self.label_7.setStatusTip(_translate("MainWindow", "The width Δr of the inter-spin distance distribution P(r)"))
    self.label_7.setText(_translate("MainWindow", "Δr  [nm]"))
    self.sim_xi_mean_line.setStatusTip(_translate("MainWindow", "The mean value ‹ξ› of the angular distribution P(ξ)"))
    self.sim_xi_mean_line.setText(_translate("MainWindow", "90"))
    self.phi_distr_box.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(φ)"))
    self.phi_distr_box.setItemText(0, _translate("MainWindow", "normal"))
    self.phi_distr_box.setItemText(1, _translate("MainWindow", "uniform"))
    self.label_18.setStatusTip(_translate("MainWindow", "The maximum value of the θ axis of the spectrum vs θ simulation"))
    self.label_18.setText(_translate("MainWindow", "Max θ  [°]"))
    self.label_29.setStatusTip(_translate("MainWindow", "The maximum value of the φ axis of the spectrum vs φ simulation"))
    self.label_29.setText(_translate("MainWindow", "Max <φ>   [°]"))
    self.label_15.setStatusTip(_translate("MainWindow", "The width Δξ of the angular distribution P(ξ)"))
    self.label_15.setText(_translate("MainWindow", "Δξ  [°]"))
    self.sim_phi_min_line.setStatusTip(_translate("MainWindow", "The minimal value of the axis of the spectrum vs simulation"))
    self.sim_phi_min_line.setText(_translate("MainWindow", "0"))
    self.xi_distr_box.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(ξ)"))
    self.xi_distr_box.setItemText(0, _translate("MainWindow", "normal"))
    self.xi_distr_box.setItemText(1, _translate("MainWindow", "uniform"))
    self.tab_param_sub.setTabText(self.tab_param_sub.indexOf(self.tab_simsettings), _translate("MainWindow", "Input"))
    self.label_48.setText(_translate("MainWindow", "Specify symmetry and g-factors of spin centers.\n"
"\n"
"\n"
"Note:\n"
"Spin A can have only an isotropic or almost isotropic g-factor. \n"
"Spin B can have an isotropic or anisotropic g-factor."))
    self.label_36.setText(_translate("MainWindow", "Spin A"))
    self.label_39.setText(_translate("MainWindow", "type:"))
    self.label_40.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">xx</span></p></body></html>"))
    self.label_41.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">yy</span></p></body></html>"))
    self.label_42.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">zz</span></p></body></html>"))
    self.spinA_gxx_line.setText(_translate("MainWindow", "2.0032"))
    self.spinA_gyy_line.setText(_translate("MainWindow", "2.0032"))
    self.spinA_gzz_line.setText(_translate("MainWindow", "2.0032"))
    self.spinA_type_box.setItemText(0, _translate("MainWindow", "isotropic"))
    self.label_43.setText(_translate("MainWindow", "Spin B"))
    self.label_45.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">xx</span></p></body></html>"))
    self.label_47.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">zz</span></p></body></html>"))
    self.label_44.setText(_translate("MainWindow", "type:"))
    self.label_46.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">yy</span></p></body></html>"))
    self.spinB_gxx_line.setText(_translate("MainWindow", "1.5"))
    self.spinB_gyy_line.setText(_translate("MainWindow", "2.0"))
    self.spinB_gzz_line.setText(_translate("MainWindow", "2.5"))
    self.spinB_type_box.setItemText(0, _translate("MainWindow", "anisotropic"))
    self.spinB_type_box.setItemText(1, _translate("MainWindow", "isotropic"))
    self.tab_param_sub.setTabText(self.tab_param_sub.indexOf(self.tab_spin_system), _translate("MainWindow", "Spin System"))
    self.sim_plot_comboBox.setItemText(0, _translate("MainWindow", "Timetrace"))
    self.sim_plot_comboBox.setItemText(1, _translate("MainWindow", "Spectrum"))
    self.sim_plot_comboBox.setItemText(2, _translate("MainWindow", "Spectrum vs θ"))
    self.sim_plot_comboBox.setItemText(3, _translate("MainWindow", "Spectrum vs φ"))
    self.sim_plot_comboBox.setItemText(4, _translate("MainWindow", "Spectrum vs ξ"))
    self.sim_plot_comboBox.setItemText(5, _translate("MainWindow", "Spectrum vs T"))
    self.normalize_faxis_sim_radiobutton.setText(_translate("MainWindow", "Normalize frequency axis"))
    self.plot_3d_button.setText(_translate("MainWindow", "3D-plot"))
    self.sim_spec_vs_phi_plot.setStatusTip(_translate("MainWindow", "Tip: You can redraw spectrum plots with a different axis range by changing the value of the maximum frequency in the general tab."))
    self.sim_spec_vs_xi_plot.setStatusTip(_translate("MainWindow", "Tip: You can redraw spectrum plots with a different axis range by changing the value of the maximum frequency in the general tab."))
    self.sim_spec_vs_temp_plot.setStatusTip(_translate("MainWindow", "Tip: You can redraw spectrum plots with a different axis range by changing the value of the maximum frequency in the general tab."))
    self.tab_param_sub.setTabText(self.tab_param_sub.indexOf(self.sim_output_tab), _translate("MainWindow", "Output"))
    self.main_widget.setTabText(self.main_widget.indexOf(self.simulation_tab), _translate("MainWindow", "Simulation"))
    self.label_91.setText(_translate("MainWindow", "\n"
"Choose the type of data that will be fitted. \n"
""))
    self.fit_data_type_combox.setItemText(0, _translate("MainWindow", "Spectrum"))
    self.fit_data_type_combox.setItemText(1, _translate("MainWindow", "Time trace"))
    self.label_90.setText(_translate("MainWindow", "\n"
"Optimization method:\n"
""))
    self.algorithm_combox.setItemText(0, _translate("MainWindow", "genetic algorithm"))
    self.edit_algorithm_pbutton.setText(_translate("MainWindow", "Edit algorithm parameters"))
    self.label_86.setText(_translate("MainWindow", "Enter the fitting parameters.\n"
" "))
    self.xi_mean_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of <ξ>. It needs to be given if the parameter should not be optimized and remain constant."))
    self.xi_mean_fit_input_value.setText(_translate("MainWindow", "0"))
    self.r_mean_fit_ubound_line.setText(_translate("MainWindow", "3.0"))
    self.label_30.setText(_translate("MainWindow", "<φ>   [°]  "))
    self.phi_distr_fit_combox.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(φ)"))
    self.phi_distr_fit_combox.setItemText(0, _translate("MainWindow", "normal"))
    self.phi_distr_fit_combox.setItemText(1, _translate("MainWindow", "uniform"))
    self.r_width_fit_ubound_line.setText(_translate("MainWindow", "0.5"))
    self.phi_mean_fit_ubound_line.setText(_translate("MainWindow", "90"))
    self.label_4.setText(_translate("MainWindow", "\n"
"Parameter\n"
""))
    self.label_10.setText(_translate("MainWindow", "    Upper bound"))
    self.label_11.setText(_translate("MainWindow", "          \n"
"         Value\n"
""))
    self.label_31.setText(_translate("MainWindow", " Δφ    [°]  "))
    self.label_87.setText(_translate("MainWindow", "\n"
"Distribution\n"
""))
    self.xi_width_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of Δξ . It needs to be given if the parameter should not be optimized and remain constant."))
    self.xi_width_fit_input_value.setText(_translate("MainWindow", "0"))
    self.r_mean_fit_lbound_line.setText(_translate("MainWindow", "2.0"))
    self.r_width_fit_lbound_line.setText(_translate("MainWindow", "0.0"))
    self.phi_mean_fit_lbound_line.setText(_translate("MainWindow", "0"))
    self.phi_mean_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of <φ>. It needs to be given if the parameter should not be optimized and remain constant."))
    self.phi_mean_fit_input_value.setText(_translate("MainWindow", "0"))
    self.label_5.setText(_translate("MainWindow", "\n"
"Optimize\n"
""))
    self.label_61.setText(_translate("MainWindow", "  T     [K]  "))
    self.xi_width_fit_ubound_line.setText(_translate("MainWindow", "90"))
    self.temp_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of T . It needs to be given if the parameter should not be optimized and remain constant."))
    self.temp_fit_input_value.setText(_translate("MainWindow", "25"))
    self.phi_width_fit_lbound_line.setText(_translate("MainWindow", "0"))
    self.label_38.setText(_translate("MainWindow", "<ξ>    [°]  "))
    self.phi_width_fit_ubound_line.setText(_translate("MainWindow", "90"))
    self.r_mean_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of <r>. It needs to be given if the parameter should not be optimized and remain constant."))
    self.r_mean_fit_input_value.setText(_translate("MainWindow", "0"))
    self.temp_fit_lbound_line.setText(_translate("MainWindow", "2"))
    self.xi_mean_fit_ubound_line.setText(_translate("MainWindow", "90"))
    self.r_width_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of Δr. It needs to be given if the parameter should not be optimized and remain constant."))
    self.r_width_fit_input_value.setText(_translate("MainWindow", "0"))
    self.xi_width_fit_lbound_line.setText(_translate("MainWindow", "0"))
    self.label_9.setText(_translate("MainWindow", "      \n"
"    Lower bound\n"
""))
    self.xi_distr_fit_combox.setStatusTip(_translate("MainWindow", "The shape of the angular distribution P(ξ)"))
    self.xi_distr_fit_combox.setItemText(0, _translate("MainWindow", "normal"))
    self.xi_distr_fit_combox.setItemText(1, _translate("MainWindow", "uniform"))
    self.label_14.setText(_translate("MainWindow", "<r>  [nm]"))
    self.label_58.setText(_translate("MainWindow", "Δξ     [°] "))
    self.phi_width_fit_input_value.setStatusTip(_translate("MainWindow", "The default value of Δφ. It needs to be given if the parameter should not be optimized and remain constant."))
    self.phi_width_fit_input_value.setText(_translate("MainWindow", "0"))
    self.xi_mean_fit_lbound_line.setText(_translate("MainWindow", "0"))
    self.r_distr_fit_combox.setStatusTip(_translate("MainWindow", "The shape of the inter-spin distance distribution P(r)"))
    self.r_distr_fit_combox.setItemText(0, _translate("MainWindow", "normal"))
    self.r_distr_fit_combox.setItemText(1, _translate("MainWindow", "uniform"))
    self.label_24.setText(_translate("MainWindow", " Δr   [nm]"))
    self.temp_fit_ubound_line.setText(_translate("MainWindow", "50"))
    self.fitting_tab.setTabText(self.fitting_tab.indexOf(self.fit_parameter_tab), _translate("MainWindow", "Input"))
    self.label_89.setText(_translate("MainWindow", "Specify symmetry and g-factors of spin centers.\n"
"\n"
"\n"
"Note:\n"
"Spin A can have only an isotropic or almost isotropic g-factor. \n"
"Spin B can have an isotropic or anisotropic g-factor."))
    self.label_92.setText(_translate("MainWindow", "Spin A"))
    self.label_93.setText(_translate("MainWindow", "type:"))
    self.label_94.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">xx</span></p></body></html>"))
    self.label_95.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">yy</span></p></body></html>"))
    self.label_96.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">zz</span></p></body></html>"))
    self.spinA_gxx_line_fit.setText(_translate("MainWindow", "2.0032"))
    self.spinA_gyy_line_fit.setText(_translate("MainWindow", "2.0032"))
    self.spinA_gzz_line_fit.setText(_translate("MainWindow", "2.0032"))
    self.spinA_type_box_fit.setItemText(0, _translate("MainWindow", "isotropic"))
    self.label_97.setText(_translate("MainWindow", "Spin B"))
    self.label_98.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">xx</span></p></body></html>"))
    self.label_99.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">zz</span></p></body></html>"))
    self.label_100.setText(_translate("MainWindow", "type:"))
    self.label_101.setText(_translate("MainWindow", "<html><head/><body><p>g<span style=\" font-size:14pt; vertical-align:sub;\">yy</span></p></body></html>"))
    self.spinB_gxx_line_fit.setText(_translate("MainWindow", "1.5"))
    self.spinB_gyy_line_fit.setText(_translate("MainWindow", "2.0"))
    self.spinB_gzz_line_fit.setText(_translate("MainWindow", "2.5"))
    self.spinB_type_box_fit.setItemText(0, _translate("MainWindow", "anisotropic"))
    self.spinB_type_box_fit.setItemText(1, _translate("MainWindow", "isotropic"))
    self.fitting_tab.setTabText(self.fitting_tab.indexOf(self.fit_spin_system_tab), _translate("MainWindow", "Spin System"))
    self.label_25.setText(_translate("MainWindow", "Parameter"))
    self.label_27.setText(_translate("MainWindow", "<r>  [nm]"))
    self.label_28.setText(_translate("MainWindow", " Δr   [nm]"))
    self.label_103.setText(_translate("MainWindow", "<φ>   [°]  "))
    self.label_130.setText(_translate("MainWindow", " Δφ    [°]  "))
    self.label_104.setText(_translate("MainWindow", "<ξ>    [°]  "))
    self.label_105.setText(_translate("MainWindow", "Δξ     [°] "))
    self.label_106.setText(_translate("MainWindow", "  T     [K]  "))
    self.label_107.setText(_translate("MainWindow", "Optimized"))
    self.r_mean_opt_label.setText(_translate("MainWindow", "No"))
    self.r_width_opt_label.setText(_translate("MainWindow", "No"))
    self.phi_mean_opt_label.setText(_translate("MainWindow", "No"))
    self.phi_width_opt_label.setText(_translate("MainWindow", "No"))
    self.xi_mean_opt_label.setText(_translate("MainWindow", "No"))
    self.xi_width_opt_label.setText(_translate("MainWindow", "No"))
    self.temp_opt_label.setText(_translate("MainWindow", "No"))
    self.label_114.setText(_translate("MainWindow", "Value"))
    self.label_123.setText(_translate("MainWindow", "Error"))
    self.fitting_tab.setTabText(self.fitting_tab.indexOf(self.fit_output_tab), _translate("MainWindow", "Output"))
    self.main_widget.setTabText(self.main_widget.indexOf(self.tab_fitting_0), _translate("MainWindow", "Fitting"))
    self.use_fit_results_chbox.setText(_translate("MainWindow", "Use results of fitting process"))
    self.err_analysis_type_combox.setItemText(1, _translate("MainWindow", "Spectrum fit"))
    self.err_analysis_type_combox.setItemText(2, _translate("MainWindow", "Time trace fit"))
    self.label_20.setStatusTip(_translate("MainWindow", "The required file is created when saving the results of fitting."))
    self.label_20.setText(_translate("MainWindow", "Load optimized fitting parameters"))
    self.search_opt_param_file_button.setStatusTip(_translate("MainWindow", "The required file is created when saving the results of fitting."))
    self.opt_param_line.setStatusTip(_translate("MainWindow", "The required file is created when saving the results of fitting."))
    self.label_69.setText(_translate("MainWindow", "Enter the error analysis settings.\n"
""))
    self.label_21.setStatusTip(_translate("MainWindow", "The number of points in the error analysis data set."))
    self.label_21.setText(_translate("MainWindow", "Number of points   "))
    self.number_of_points_line.setStatusTip(_translate("MainWindow", "The number of points in the error analysis data set."))
    self.number_of_points_line.setText(_translate("MainWindow", "10000"))
    self.label_23.setStatusTip(_translate("MainWindow", "The threshold used to determine the uncertainty ranges of the fitting parameters. Given in multiples of the standard deviation."))
    self.label_23.setText(_translate("MainWindow", "Confidence interval [ σ ]   "))
    self.confidence_interval_line.setStatusTip(_translate("MainWindow", "The threshold used to determine the uncertainty ranges of the fitting parameters. Given in multiples of the standard deviation."))
    self.confidence_interval_line.setText(_translate("MainWindow", "3"))
    self.label_71.setText(_translate("MainWindow", "<html><head/><body><p>Specify the pairs of parameters for which the dependency of χ<span style=\" vertical-align:super;\">2</span> will be calculated. You can choose up to 16 sets of fitting parameters.<br/></p></body></html>"))
    self.label_75.setText(_translate("MainWindow", "——"))
    self.err_param_110_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_110_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_110_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_110_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_110_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_110_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_110_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_73.setText(_translate("MainWindow", "——"))
    self.err_param_411_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_411_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_411_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_411_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_411_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_411_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_411_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_310_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_310_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_310_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_310_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_310_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_310_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_310_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_311_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_311_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_311_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_311_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_311_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_311_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_311_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_211_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_211_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_211_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_211_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_211_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_211_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_211_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_74.setText(_translate("MainWindow", "——"))
    self.label_70.setText(_translate("MainWindow", "——"))
    self.err_param_210_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_210_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_210_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_210_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_210_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_210_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_210_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_410_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_410_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_410_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_410_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_410_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_410_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_410_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_111_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_111_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_111_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_111_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_111_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_111_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_111_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_121_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_121_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_121_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_121_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_121_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_121_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_121_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_76.setText(_translate("MainWindow", "——"))
    self.err_param_420_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_420_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_420_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_420_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_420_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_420_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_420_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_120_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_120_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_120_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_120_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_120_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_120_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_120_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_220_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_220_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_220_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_220_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_220_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_220_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_220_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_321_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_321_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_321_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_321_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_321_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_321_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_321_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_221_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_221_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_221_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_221_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_221_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_221_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_221_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_320_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_320_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_320_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_320_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_320_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_320_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_320_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_72.setText(_translate("MainWindow", "——"))
    self.label_78.setText(_translate("MainWindow", "——"))
    self.label_77.setText(_translate("MainWindow", "——"))
    self.err_param_421_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_421_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_421_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_421_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_421_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_421_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_421_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_82.setText(_translate("MainWindow", "——"))
    self.label_81.setText(_translate("MainWindow", "——"))
    self.label_79.setText(_translate("MainWindow", "——"))
    self.label_80.setText(_translate("MainWindow", "——"))
    self.err_param_130_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_130_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_130_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_130_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_130_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_130_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_130_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_131_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_131_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_131_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_131_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_131_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_131_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_131_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_230_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_230_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_230_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_230_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_230_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_230_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_230_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_231_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_231_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_231_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_231_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_231_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_231_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_231_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_330_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_330_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_330_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_330_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_330_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_330_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_330_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_331_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_331_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_331_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_331_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_331_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_331_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_331_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_430_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_430_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_430_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_430_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_430_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_430_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_430_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_431_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_431_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_431_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_431_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_431_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_431_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_431_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.label_84.setText(_translate("MainWindow", "——"))
    self.label_109.setText(_translate("MainWindow", "——"))
    self.label_83.setText(_translate("MainWindow", "——"))
    self.label_85.setText(_translate("MainWindow", "——"))
    self.err_param_140_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_140_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_140_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_140_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_140_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_140_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_140_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_141_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_141_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_141_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_141_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_141_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_141_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_141_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_240_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_240_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_240_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_240_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_240_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_240_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_240_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_241_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_241_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_241_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_241_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_241_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_241_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_241_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_340_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_340_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_340_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_340_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_340_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_340_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_340_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_341_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_341_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_341_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_341_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_341_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_341_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_341_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_440_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_440_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_440_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_440_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_440_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_440_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_440_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.err_param_441_cbox.setItemText(1, _translate("MainWindow", "<r>"))
    self.err_param_441_cbox.setItemText(2, _translate("MainWindow", "Δr "))
    self.err_param_441_cbox.setItemText(3, _translate("MainWindow", "<φ>"))
    self.err_param_441_cbox.setItemText(4, _translate("MainWindow", "Δφ"))
    self.err_param_441_cbox.setItemText(5, _translate("MainWindow", "<ξ> "))
    self.err_param_441_cbox.setItemText(6, _translate("MainWindow", "Δξ"))
    self.err_param_441_cbox.setItemText(7, _translate("MainWindow", "T"))
    self.tab_error_analysis.setTabText(self.tab_error_analysis.indexOf(self.err_parameter_tab), _translate("MainWindow", "Input"))
    self.tab_error_analysis.setTabText(self.tab_error_analysis.indexOf(self.err_2d_plots_tab), _translate("MainWindow", "Output"))
    self.tab_error_analysis.setTabText(self.tab_error_analysis.indexOf(self.err_1d_plots), _translate("MainWindow", "Error Bars"))
    self.main_widget.setTabText(self.main_widget.indexOf(self.tab_error_analysis_0), _translate("MainWindow", "Error Analysis"))
    self.menuFile.setTitle(_translate("MainWindow", "File"))
    self.menuAbout.setTitle(_translate("MainWindow", "About"))
    self.actionNew.setText(_translate("MainWindow", "New"))
    self.actionNew.setStatusTip(_translate("MainWindow", "Create new file"))
    self.action_save_as_cfg.setText(_translate("MainWindow", "Save settings as cfg file"))
    self.action_load_cfg.setText(_translate("MainWindow", "Load settings from cfg file"))
    self.action_save_log.setText(_translate("MainWindow", "Save log file"))
    self.action_save_sim_results.setText(_translate("MainWindow", "Save simulation results and plots"))
    self.action_save_fit_results.setText(_translate("MainWindow", "Save fitting results and plots"))
    self.actionSave_graphics.setText(_translate("MainWindow", "Save graphics"))
    self.action_save_err_results.setText(_translate("MainWindow", "Save error analysis results and plots"))